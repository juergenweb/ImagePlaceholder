<?php namespace ProcessWire;

class ImagePlaceholder extends WireData implements Module, ConfigurableModule
{
    public static function getModuleInfo()
    {
        return [
      'title' => 'Image Placeholder',
      'summary' => 'A configurable module for creating placeholder images.',
      'author' => 'JÃ¼rgen Kern',
      'autoload' => false,
      'singular' => true,
      'requires' => 'ProcessWire>=3.0.0, PHP>=7.0.0',
      'href' => 'https://github.com/juergenweb/ImagePlaceholder',
      'icon' => 'image',
      'version' => 1
    ];
    }

    // __construct
    public function __construct()
    {
        parent::__construct();
        $this->width = 150;
        $this->height = null;
        $this->font_size = 14;
        $this->background_color = null;
        $this->text_color = '#666666';
        $this->font_family = 'arial';
        $this->text = null;
    }

    /*
    Custom validation for input fields
    */

    public function init()
    {
        $this->addHookAfter("Inputfield::processInput", $this, "validateField");
    }

    /*
    Validate field values
    */
    public function validateField(HookEvent $event)
    {
        $inputfield = $event->object;
        $inputValue = $event->arguments(0);

        $name = $inputfield->name;

        if (($name == 'background_color') || ($name == 'text_color')) {
            if (!$this->validateHexadecimal($inputfield->attr("value"))) {
                $inputfield->error($this->_("Only heaxadecimal values are allowed"));
            } else {
              //sanatize the value and populate it back to the inputfield
              $sanitizedValue = $this->sanitizeHex($inputfield->attr("value"));
              $inputfield->value = $sanitizedValue;
            }
        }
        if ($name == 'delete_font') {
            if ($inputfield->attr("value")) {
                $values = $inputfield->attr("value");
                $names = ucwords(implode(', ', $values));
                //delete the selected font files in custom_fonts directory
                foreach ($values as $file) {
                    $file = dirname(__FILE__) . DIRECTORY_SEPARATOR.'custom_fonts'.DIRECTORY_SEPARATOR.$file.'.ttf';
                    unlink($file);
                }
                $inputfield->message(sprintf($this->_('Following fonts were deleted: %s')), $names);
            }
        }
    }



    /**
      * Check if entered color code is in hexadecimal format (# as first letter)
      *
      * @param string|null hexadecimal
      * @return bool
    */

    private function validateHexadecimal(string $hexadecimal = null)
    {
        if ($hexadecimal) {
          if(substr($hexadecimal, 0, 1) === '#') {
            if (ctype_alnum(substr($hexadecimal, 1))) {
              return true;
            }
            return false;
          }
          return false;
        }
        return true;
    }


    /**
      * Helper method for sanitizing hexadecimal colors
      * checks for correct hexadecimal color code first and change short notation to default notation (fe. #f0e to #ff00ee)
      *
      * @param string|null $hexcolor
      * @return string
    */

    private function sanitizeHex(string $hexcolor = null): string
    {
      if($hexcolor){
        $color = trim($hexcolor);
        if ($this->validateHexadecimal($color)) {
          $number = strlen($color);
          switch($number){
            case($number === 4):
              //shorthand syntax is used -.> so double every letter
              $first = substr($color, -3, 1);
              $second = substr($color, -2, 1);
              $third = substr($color, -1);
              $color = '#'.$first.$first.$second.$second.$third.$third;
            break;
            case($number<7):
              //no shorthand syntax is used but syntax is not correct - add a fallback to generate hex color with 6 times the same letter
              $lastLetter = substr($color, -1);
              $color = str_pad($color, 7, $lastLetter);
            break;
            case($number>7):
              $color = substr($color,0,7);
            break;
            default:
          }
          return $color;
        } else {
          throw new \Exception($this->_("Only heaxadecimal values are allowed. They must start with # and can only consist of letters and numbers."));
        }
      } else {
        return '';
      }
    }



    // Set and get width

    /**
      * Set the width of the placeholder image
      *
      * @param string width  (fe 400); required value
      * @return string|null
    */

    public function setWidth(int $width): self
    {
        if ($width > 0) {
            $this->width = $width;
        }
        return $this;
    }

    /**
     * Get the width of the placeholder image
     *
     * @return string|null
    */

    public function getWidth()
    {
        return $this->width;
    }

    /**
     * Set the Height of the placeholder image
     *
     * @param string|null height  (fe 300)
     * @return string|null
    */

    public function setHeight(int $height = null): self
    {
        if ($height > 0) {
            $this->height = $height;
        }
        return $this;
    }

    /**
     * Get the height of the placeholder image
     *
     * @return string|null
    */

    public function getHeight()
    {
        return $this->height;
    }

    /**
      * Set the background color of the placeholder image
      *
      * @param string|null backgroundColor
      * @return string|null
    */

    public function setBackgroundColor(string $backgroundColor = null): self
    {
        if ($backgroundColor) {
            $this->background_color = $this->sanitizeHex($backgroundColor);
        }
        return $this;
    }

    /**
     * Get the background color of the placeholder image
     *
     * @return string|null
    */

    public function getBackgroundColor()
    {
        return $this->background_color;
    }

    /**
      * Set the text color of the placeholder image
      *
      * @param string|null textColor
      * @return string|null
    */

    public function setTextColor(string $textColor = null): self
    {
        if ($textColor) {
            $this->text_color = $this->sanitizeHex($textColor);
        }
        return $this;
    }

    /**
     * Get the text color of the placeholder image
     *
     * @return string|null
    */

    public function getTextColor()
    {
        return $this->text_color;
    }

    /**
      * Set the text of the placeholder image
      *
      * @param string|null text
      * @return string|null
    */

    public function setText(string $text = null): self
    {
        if ($text) {
            $this->text = trim($text);
        }
        return $this;
    }

    /**
     * Get the text of the placeholder image
     *
     * @return string|null
    */

    public function getText()
    {
      return $this->getDefaultText();
    }

    /**
      * Get the default text of the placeholder image - needed for multilanguage value
      *
      * @return string|null
    */

    public function getDefaultText(): string
    {
        //default
        $data = $this->wire('modules')->getConfig($this);

        if($this->wire('languages')) {
            $userLanguage = $this->wire('user')->language;
            $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
            $text = $data['text'.$lang];
            if(!$text)
              $text = $data['text'];
        }
        else {
            $data['text'];
        }
        if ($text) {
            return $text;
        }
        return '';
    }


    /**
      * Set the font size for the placeholder text
      *
      * @param int|null font
      * @return int|null
    */

    public function setFontSize(int $fontsize = null): self
    {
        if ($fontsize > 0) {
            $this->font_size = $fontsize;
        }

    }

    /**
      * Get the default fontsize of the placeholder text
      *
      * @return int|null
    */

    public function getFontSize()
    {
        if($this->font_size){
          return $this->font_size;
        }
    }

    /**
      * Set the font family for the placeholder text
      *
      * @param string|null font
      * @return string|null
    */

    public function setFontFamily(string $fontfamily = null): self
    {
        if ($fontfamily) {
            $fontfamily = trim($fontfamily);
            //only allow file names which are in the 'fonts' or 'custom_fonts' directory
            if (in_array($fontfamily, $this->getAllFontFiles())) {
                $this->font_family = $fontfamily;
            }
        }
        return $this;
    }

    /**
      * Get the default font family of the placeholder text
      *
      * @return string|null
    */

    public function getFontFamily()
    {
        return $this->font_family;
    }

    /**
      * Security method to check if file is in format true type font
      *
      * @return bool
    */

    private function checkFileExt(string $pathToFile = null)
    {
        $ext = pathinfo($pathToFile, PATHINFO_EXTENSION);
        if (($ext === 'ttf') || ($ext === 'TTF')) {
            return true;
        }
        return false;
    }

    /**
      * Get all files in the format of ttf in a given directory
      *
      * @return array
    */

    private function getAllFontFilesInDir(string $pathToDir = null): array
    {
        $fontFiles = [];
        if ($pathToDir) {
            $files = scandir($pathToDir);
            $files = array_slice($files, 2);
            if ($files) {
                foreach ($files as $file) {
                    if ((is_file($pathToDir.$file)) && ($this->checkFileExt($file))) {
                        $fontFiles[] = pathinfo($file, PATHINFO_FILENAME); // file name without extension
                    }
                }
            }
            return $fontFiles;
        }
    }

    /**
      * Get all ttf files in the fonts and custom_fonts folders
      *
      * @return array
    */

    private function getAllFontFiles(): array
    {
        $defaultFontFiles = $this->getAllFontFilesInDir(dirname(__FILE__) . DIRECTORY_SEPARATOR.'fonts'.DIRECTORY_SEPARATOR);
        $customFontFiles = $this->getAllFontFilesInDir(dirname(__FILE__) . DIRECTORY_SEPARATOR.'custom_fonts'.DIRECTORY_SEPARATOR);
        return array_merge($defaultFontFiles, $customFontFiles);
    }

    /**
      * Create an array of all ttf files for the select $selectOptions (['font-file-name' => 'font name'])
      *
      * @return array
    */

    private function createFontFamilySelect()
    {
        $selectOptions = [];
        foreach ($this->getAllFontFiles() as $v) {
            $selectOptions[$v] = ucwords($v);
        }
        return $selectOptions;
    }

    /**
      * Create an array of all ttf files for the select $selectOptions (['font-file-name' => 'font name'])
      *
      * @return array
    */

    private function createFontFamilyDelete()
    {
        $customFontFiles = $this->getAllFontFilesInDir(dirname(__FILE__) . DIRECTORY_SEPARATOR.'custom_fonts'.DIRECTORY_SEPARATOR);
        $selectOptions = [];
        foreach ($customFontFiles as $v) {
            $selectOptions[$v] = ucwords($v);
        }
        return $selectOptions;
    }

    /**
      * Render the img src or a complete image tag
      *
      * @param bool tag  true = render a complete tag, false = render only the src (default)
      * @return array
    */

    public function render(bool $tag = false)
    {
        if (empty($this->getHeight())) {
            $this->setHeight($this->getWidth());
        } // make squared image

        $image = imagecreatetruecolor($this->getWidth(), $this->getHeight());
        // Set the background color of image
        if ($this->getBackgroundColor()) {
            list($r, $g, $b) = sscanf($this->getBackgroundColor(), '#%02x%02x%02x');
            $background_color = imagecolorallocate($image, $r, $g, $b);
            // Fill background with above selected color
            imagefilledrectangle($image, 0, 0, $this->getWidth(), $this->getHeight(), $background_color);
        } else {
            // Transparent Background
            imagealphablending($image, false);
            $transparency = imagecolorallocatealpha($image, 0, 0, 0, 127);
            imagefill($image, 0, 0, $transparency);
            imagesavealpha($image, true);
        }
        // Set the text color of image
        list($r, $g, $b) = sscanf($this->getTextColor(), '#%02x%02x%02x');
        $text_color = imagecolorallocate($image, $r, $g, $b);

        //get Folder of font file
        if (file_exists(dirname(__FILE__) . DIRECTORY_SEPARATOR.'fonts'.DIRECTORY_SEPARATOR.$this->getFontFamily().'.ttf')) {
            $dir = 'fonts';
        } else {
            $dir = 'custom_fonts';
        }

        $fontFile = dirname(__FILE__) . DIRECTORY_SEPARATOR.$dir.DIRECTORY_SEPARATOR.$this->getFontFamily().'.ttf';
        if (file_exists($fontFile)) {
            if ($this->getText()) {

                //set custom text or fallback to default text if present
                //$text = ($this->getText()) ? $this->getText() : $this->getDefaultText();
                $text = $this->getText();

                // get the the coordinates for width and height of the text in pixel
                $coordinates = imagettfbbox($this->getFontSize(), 0, $fontFile, $text);

                // Center text horizontally
                $center = ceil($this->getWidth() / 2);
                $x = $center - (ceil($coordinates[4]/2));

                // Center text vertically
                $center = ceil($this->getHeight() / 2);
                $y = $center  - (ceil($coordinates[7]/2));

                // Draw text string
                imagettftext($image, $this->getFontSize(), 0, $x, $y, $text_color, $fontFile, $text);
            }
        }

        ob_start();
        imagepng($image);
        $contents = ob_get_contents();
        ob_end_clean();

        imagedestroy($image);

        $html = 'data:image/png;base64,'.base64_encode($contents);
        if ($tag) {
            $html = '<img src="'.$html.'" width="'.$this->getWidth().'px" height="'.$this->getHeight().'px" alt="'.$this->getText().'" title="'.$this->getText().'" />';
        }
        return $html;
    }

    public function ___install()
    {
        if (extension_loaded('gd') && function_exists('gd_info')) {
            // all fine
        } else {
            throw new WireException("PHP GD library is NOT installed on your web server");
        }
    }

    /**
     * Config inputfields
     *
     * @param InputfieldWrapper $inputfields
    */

    public function getModuleConfigInputfields($inputfields)
    {
        $modules = $this->wire('modules');
        $languages = $this->wire('languages');

        /* @var InputfieldText $f */
        $f = $modules->InputfieldText;
        $f_name = 'text';
        $f->name = $f_name;
        $f->label = $this->_('Default placeholder text');
        $f->description = $this->_('Enter a default text for the placeholder image (fe Sorry, no pic). Leaving this field blank means a placeholder image without any text information.');
        $f->value = $this->$f_name;
        if ($languages) {
            $f->useLanguages = true;
            foreach ($languages as $language) {
                if ($language->isDefault()) {
                    continue;
                }
                $f->set("value$language", (string) $this->get("timeformat$language"));
            }
        }
        $f->collapsed = Inputfield::collapsedBlank;
        $inputfields->add($f);

        /* @var InputfieldText $f */
        $f = $modules->InputfieldText;
        $f_name = 'background_color';
        $f->name = $f_name;
        $f->label = $this->_('Default background color');
        $f->description = $this->_('Enter a default color for the image background in hexadecimal code (fe #dddddd). Leaving this field blank means a transparent background.');
        $f->value = $this->$f_name;
        $f->collapsed = Inputfield::collapsedBlank;
        $inputfields->add($f);

        /* @var InputfieldText $f */
        $f = $modules->InputfieldText;
        $f_name = 'text_color';
        $f->name = $f_name;
        $f->label = $this->_('Default text color');
        $f->description = $this->_('Enter a default color for the text in hexadecimal code (fe #666666)');
        $f->value = $this->$f_name;
        $f->required = true;
        $inputfields->add($f);

        /* @var InputfieldSelect $f */
        $f = $modules->InputfieldSelect;
        $f_name = 'font_family';
        $f->name = $f_name;
        $f->id = $f_name;
        $f->label = $this->_('Default font family');
        $f->value = $this->$f_name;
        $f->description = $this->_('Please select the default font.');
        $f->options = $this->createFontFamilySelect();
        $f->required = true;
        $inputfields->add($f);

        /* @var InputfieldInteger $f */
        $f = $modules->InputfieldInteger;
        $f_name = 'font_size';
        $f->name = $f_name;
        $f->label = $this->_('Default font size');
        $f->value = $this->$f_name;
        $f->inputType = 'number';
        $f->min = 1;
        $f->required = true;
        $inputfields->add($f);

        /** @var InputfieldFileï»¿ ï»¿$f */
        $f = $modules->InputfieldFile;
        $f_name = 'font_upload';
        $f->label = $this->_('Upload new font file');
        $f->description = $this->_('Only true type font files are allowed');
        $f->name = $f_name;
        $f->icon = 'folder-plus';
        $f->extensions = 'ttf';
        $f->maxFiles = 1;
        $f->descriptionRows = 0;
        $f->destinationPath = $this->wire('config')->paths->$this . 'custom_fonts/';
        $inputfields->add($f);

        $f = $modules->InputfieldSelectMultiple;
        $f_name = 'delete_font';
        $f->name = $f_name;
        $f->id = $f_name;
        $f->label = $this->_('Delete fonts');
        $f->value = $this->$f_name;
        $f->description = $this->_('Please select the fonts you want to delete (multiple values are allowed).');
        $f->notes = $this->_('Hold STRG while selecting multiple fonts. Only uploaded font files can be deleted. Default font files will stay untouched.');
        $f->options = $this->createFontFamilyDelete();
        $f->collapsed = true;
        $inputfields->add($f);

        return $inputfields;
    }
}
